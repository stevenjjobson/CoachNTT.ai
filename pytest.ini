[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Test execution
addopts = 
    -v
    --strict-markers
    --tb=short
    --maxfail=10
    --disable-warnings
    --color=yes
    -p no:warnings

# Timeout settings
timeout = 300
timeout_method = thread

# Markers
markers =
    unit: Unit tests that test individual components
    integration: Integration tests that test multiple components
    e2e: End-to-end tests that test complete workflows
    safety: Safety validation tests
    performance: Performance and load tests
    slow: Tests that take more than 5 seconds
    requires_api: Tests that require API server running
    requires_docker: Tests that require Docker containers
    asyncio: Tests that use asyncio

# Coverage settings
[coverage:run]
source = src
branch = True
parallel = True
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */alembic/*
    */scripts/*
    */vault/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Test output
[tool:pytest]
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = True