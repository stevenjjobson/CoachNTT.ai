---
title: Next Development Steps
created: 2025-07-18T12:00:00Z
updated: 2025-07-19T14:00:00Z
category: planning
tags: [roadmap, voice-integration, session-2.3.3, voice-to-text, priorities]
source: Development planning and task tracking
session: 2.3.3
---

# ðŸŽ¯ Next Steps for CoachNTT.ai

## Immediate Priority: Session 2.3.3 - Voice-to-Text Integration

### Session Goals
1. **MCP Transcription Integration**
   - Connect AudioCaptureService to MCP transcribe API
   - Implement streaming transcription support
   - Add real-time transcription feedback
   - Handle transcription errors gracefully

2. **Voice-to-NLQ Pipeline**
   - Route transcriptions to NLQ parser
   - Implement confidence thresholds
   - Add voice command confirmation
   - Create fallback strategies

3. **Voice Feedback Loop**
   - Add transcription preview
   - Implement command confirmation UI
   - Create voice activity indicators
   - Add error recovery prompts

4. **Extension Integration**
   - Wire up voice commands in extension.ts
   - Connect NLQ commands to registry
   - Add voice toggle to status bar
   - Register all voice keybindings

### Prerequisites Check
- [x] Voice command framework complete
- [x] NLQ parser and semantic analyzer
- [x] Code search engine with AST
- [x] Audio capture service ready
- [x] MCP client with tool_call support
- [ ] Connect transcription to voice commands
- [ ] Integrate all services in extension.ts

## Technical Tasks

### High Priority
1. **Voice-to-Text Integration**
   - Wire AudioCaptureService to MCP
   - Connect transcriptions to commands
   - Add real-time feedback
   - Implement error handling

2. **Critical Test Coverage Gaps**
   - Living Documents: No tests for document-abstractor, context-window-manager
   - Audio Services: No tests for audio-playback, voice-activity-detector, audio-capture
   - Monitoring: No tests for monitoring-service, code-analysis-service
   - Only 5 test files exist for 30+ services - major technical debt

3. **Documentation Updates**
   - Update API documentation
   - Document voice commands
   - Create user guide for voice
   - Update architecture diagrams

### Medium Priority
1. **Performance Optimization**
   - Profile WebView loading
   - Optimize tree refreshes
   - Cache command patterns
   - Reduce message overhead

2. **Error Handling**
   - Improve error messages
   - Add retry mechanisms
   - Create fallback options
   - Log errors safely

3. **UI Enhancements**
   - Voice command hints
   - Status indicators
   - Progress feedback
   - Accessibility improvements

### Low Priority
1. **Future Features**
   - Multi-language support
   - Custom voice models
   - Advanced NLU integration
   - Team collaboration

## Session 2.3.3 Implementation Plan

### 1. Transcription Service (~200 lines)
```typescript
interface TranscriptionService {
  transcribe(audio: AudioBuffer): Promise<TranscriptionResult>;
  startStreaming(): TranscriptionStream;
  stopStreaming(): void;
}
```

### 2. Voice Pipeline Manager (~250 lines)
- Connect audio capture to transcription
- Route transcriptions to appropriate handlers
- Manage confidence thresholds
- Handle errors and retries

### 3. Voice UI Components (~300 lines)
- Transcription preview widget
- Command confirmation dialog
- Voice activity status bar
- Error recovery prompts

### 4. Extension Integration (~150 lines)
- Register all voice services
- Connect event handlers
- Update status bar items
- Add command palette entries

### 5. Testing & Documentation (~200 lines)
- Integration tests for voice pipeline
- Update user documentation
- Create voice command guide
- Add troubleshooting section

## Outstanding Issues

### From Previous Sessions
1. **Living Documents**
   - Complete evolution tracking
   - Implement preview panel
   - Add session-aware loading

2. **Monitoring Dashboard**
   - Add more metric types
   - Implement alerting
   - Create metric history

3. **Code Analysis**
   - Support more languages
   - Add refactoring suggestions
   - Create fix actions

### Known Bugs
- None critical at this time
- Minor UI glitches in dark theme
- Occasional WebSocket reconnect delay

## Resource Requirements

### Development Time
- Session 2.3.1: ~3-4 hours
- Test coverage: ~2 hours
- Documentation: ~1 hour

### Context Budget
- Estimated: ~2800 tokens
- Output: ~1250 lines
- Buffer: Adequate

### Dependencies
- No new npm packages needed
- Existing infrastructure sufficient
- Web Speech API browser support

## Success Criteria

### For Session 2.3.2 (Completed)
- [x] NLQ parser operational
- [x] Code search integrated
- [x] Semantic understanding working
- [x] Results properly ranked
- [x] Voice navigation functional
- [x] Tests created and passing

### For Session 2.3.3
- [ ] MCP transcription connected
- [ ] Voice-to-text pipeline working
- [ ] Real-time feedback operational
- [ ] Command confirmation UI
- [ ] Extension fully integrated
- [ ] All voice features tested

### For Phase 2 Completion
- [ ] All voice features integrated
- [ ] Performance optimized
- [ ] VPS deployment ready
- [ ] Security hardened
- [ ] User guide complete
- [ ] >90% test coverage

## Quick Start Commands

```bash
# Begin Session 2.3.2
cd vscode-extension

# Review voice command implementation
code src/services/voice-command/

# Start development
npm run watch

# Open test instance
F5 in VSCode

# Test NLQ queries
"Find all functions that handle authentication"
"Show me the constructor for MCPClient"
"Where is the memory validation implemented?"
```

## Notes for Next Session

- Leverage existing CommandParser for NLQ foundation
- Consider integrating with code-analysis-service
- Plan query result caching strategy
- Think about search performance optimization
- Design visual feedback for search progress
- Consider voice interruption for long searches