---
title: Next Development Steps
created: 2025-07-18T12:00:00Z
updated: 2025-07-19T15:30:00Z
category: planning
tags: [roadmap, testing-critical, session-2.3.2.5, technical-debt, priorities]
source: Development planning and task tracking
session: 2.3.2.5
---

# ðŸŽ¯ Next Steps for CoachNTT.ai

## ðŸš¨ Immediate Priority: Session 2.3.2.5 - Testing Foundation Catch-Up

**Why This Is Critical**: 
- Currently at ~15% test coverage (target: 90%)
- Audio services have 0 tests
- Voice integration depends on untested foundations
- Risk of cascading failures without proper testing

## Next Priority: Session 2.3.3 - Voice-to-Text Integration (Post-Testing)

### Session Goals
1. **Backend Foundation Testing**
   - Verify Docker containers start correctly
   - Test API health endpoints
   - Validate database connections
   - Check safety enforcement rules
   - Test memory CRUD operations

2. **VSCode Extension Testing**
   - Verify extension activation
   - Test MCP WebSocket connection
   - Validate memory tree display
   - Check command registration
   - Test status bar updates

3. **Audio Pipeline Testing**
   - Test Voice Activity Detection (VAD)
   - Verify audio capture functionality
   - Test audio playback service
   - Validate audio-to-WAV encoding
   - End-to-end pipeline test

4. **Critical Path Coverage**
   - Achieve 60% test coverage on critical services
   - Create tests for all audio services (currently 0)
   - Test WebSocket pub/sub messaging
   - Validate real-time update flow
   - Document remaining testing gaps

### Prerequisites Check
- [x] Development paused for testing
- [x] Testing plan documented
- [ ] Backend smoke tests passing
- [ ] Extension activation verified
- [ ] Audio pipeline tested
- [ ] WebSocket stability confirmed
- [ ] 60% critical path coverage achieved

## Technical Tasks

### High Priority
1. **Testing Infrastructure**
   - Set up Jest configuration for extension
   - Create test fixtures and mocks
   - Implement test runners
   - Add coverage reporting

2. **Critical Test Coverage Gaps**
   - Living Documents: No tests for document-abstractor, context-window-manager
   - Audio Services: No tests for audio-playback, voice-activity-detector, audio-capture
   - Monitoring: No tests for monitoring-service, code-analysis-service
   - Only 5 test files exist for 30+ services - major technical debt

3. **Documentation Updates**
   - Update API documentation
   - Document voice commands
   - Create user guide for voice
   - Update architecture diagrams

### Medium Priority
1. **Performance Optimization**
   - Profile WebView loading
   - Optimize tree refreshes
   - Cache command patterns
   - Reduce message overhead

2. **Error Handling**
   - Improve error messages
   - Add retry mechanisms
   - Create fallback options
   - Log errors safely

3. **UI Enhancements**
   - Voice command hints
   - Status indicators
   - Progress feedback
   - Accessibility improvements

### Low Priority
1. **Future Features**
   - Multi-language support
   - Custom voice models
   - Advanced NLU integration
   - Team collaboration

## Session 2.3.2.5 Testing Plan

### 1. Backend Smoke Tests (~30 min)
```bash
# Start containers
docker-compose up -d

# Health check
curl http://localhost:8000/health

# Database verification
docker-compose exec postgres pg_isready

# Run core tests
python -m pytest tests/unit/core/test_safety.py -v
python -m pytest tests/integration/test_memory_lifecycle.py -v
```

### 2. Extension Foundation Tests (~1 hour)
```bash
cd vscode-extension

# Install test dependencies
npm install --save-dev @types/jest jest ts-jest

# Run existing tests
npm test

# Test specific services
npm test -- --testNamePattern="MCPClient"
npm test -- --testNamePattern="AudioCapture"
```

### 3. Audio Pipeline Tests (~2 hours)
- Create test fixtures for audio data
- Mock WebRTC APIs
- Test VAD thresholds
- Verify capture â†’ encoding â†’ playback flow
- Test error scenarios

### 4. Integration Tests (~1 hour)
- Test extension â†’ backend communication
- Verify WebSocket message flow
- Test memory CRUD operations
- Validate real-time updates

### 5. Coverage Report & Documentation (~30 min)
- Generate coverage reports
- Document testing gaps
- Create test execution guide
- Update project documentation

## Outstanding Issues

### From Previous Sessions
1. **Living Documents**
   - Complete evolution tracking
   - Implement preview panel
   - Add session-aware loading

2. **Monitoring Dashboard**
   - Add more metric types
   - Implement alerting
   - Create metric history

3. **Code Analysis**
   - Support more languages
   - Add refactoring suggestions
   - Create fix actions

### Known Bugs
- None critical at this time
- Minor UI glitches in dark theme
- Occasional WebSocket reconnect delay

## Resource Requirements

### Development Time
- Session 2.3.1: ~3-4 hours
- Test coverage: ~2 hours
- Documentation: ~1 hour

### Context Budget
- Estimated: ~2800 tokens
- Output: ~1250 lines
- Buffer: Adequate

### Dependencies
- No new npm packages needed
- Existing infrastructure sufficient
- Web Speech API browser support

## Success Criteria

### For Session 2.3.2 (Completed)
- [x] NLQ parser operational
- [x] Code search integrated
- [x] Semantic understanding working
- [x] Results properly ranked
- [x] Voice navigation functional
- [x] Tests created and passing

### For Session 2.3.2.5 (Testing)
- [ ] Backend services verified
- [ ] Extension activation tested
- [ ] Audio pipeline functional
- [ ] WebSocket stability confirmed
- [ ] 60% critical path coverage
- [ ] Testing infrastructure established

### For Session 2.3.3 (Deferred)
- [ ] MCP transcription connected
- [ ] Voice-to-text pipeline working
- [ ] Real-time feedback operational
- [ ] Command confirmation UI
- [ ] Extension fully integrated
- [ ] All voice features tested

### For Phase 2 Completion
- [ ] All voice features integrated
- [ ] Performance optimized
- [ ] VPS deployment ready
- [ ] Security hardened
- [ ] User guide complete
- [ ] >90% test coverage

## Quick Start Commands

```bash
# Begin Session 2.3.2
cd vscode-extension

# Review voice command implementation
code src/services/voice-command/

# Start development
npm run watch

# Open test instance
F5 in VSCode

# Test NLQ queries
"Find all functions that handle authentication"
"Show me the constructor for MCPClient"
"Where is the memory validation implemented?"
```

## Notes for Next Session

- Leverage existing CommandParser for NLQ foundation
- Consider integrating with code-analysis-service
- Plan query result caching strategy
- Think about search performance optimization
- Design visual feedback for search progress
- Consider voice interruption for long searches