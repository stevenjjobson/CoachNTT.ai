---
title: Next Development Steps
created: 2025-07-18T12:00:00Z
updated: 2025-07-19T12:00:00Z
category: planning
tags: [roadmap, voice-integration, session-2.3.2, nlq, priorities]
source: Development planning and task tracking
session: 2.3.2
---

# ðŸŽ¯ Next Steps for CoachNTT.ai

## Immediate Priority: Session 2.3.2 - Natural Language Query (NLQ)

### Session Goals
1. **Natural Language Query Parser**
   - Create NLQ processing service
   - Implement semantic understanding
   - Build query intent recognition
   - Extract search parameters

2. **Code Search Integration**
   - Connect NLQ to code analysis
   - Implement AST-based search
   - Add semantic code matching
   - Create result ranking system

3. **Voice-to-Code Navigation**
   - Map queries to file locations
   - Implement jump-to-definition
   - Add context-aware navigation
   - Create result preview

4. **Query Result Presentation**
   - Design result visualization
   - Add code snippet display
   - Implement result grouping
   - Create voice feedback for results

### Prerequisites Check
- [x] Voice command framework complete
- [x] Command parser with fuzzy matching
- [x] Code analysis service operational
- [x] AST parsing for TypeScript
- [ ] Design NLQ semantic model
- [ ] Plan code search strategies

## Technical Tasks

### High Priority
1. **Voice Command Framework**
   - Create command parser service
   - Define command grammar types
   - Build intent matching system
   - Implement command execution

2. **Critical Test Coverage Gaps**
   - Living Documents: No tests for document-abstractor, context-window-manager
   - Audio Services: No tests for audio-playback, voice-activity-detector, audio-capture
   - Monitoring: No tests for monitoring-service, code-analysis-service
   - Only 5 test files exist for 30+ services - major technical debt

3. **Documentation Updates**
   - Update API documentation
   - Document voice commands
   - Create user guide for voice
   - Update architecture diagrams

### Medium Priority
1. **Performance Optimization**
   - Profile WebView loading
   - Optimize tree refreshes
   - Cache command patterns
   - Reduce message overhead

2. **Error Handling**
   - Improve error messages
   - Add retry mechanisms
   - Create fallback options
   - Log errors safely

3. **UI Enhancements**
   - Voice command hints
   - Status indicators
   - Progress feedback
   - Accessibility improvements

### Low Priority
1. **Future Features**
   - Multi-language support
   - Custom voice models
   - Advanced NLU integration
   - Team collaboration

## Session 2.3.2 Implementation Plan

### 1. NLQ Parser Service (~300 lines)
```typescript
interface NLQuery {
  query: string;
  intent: 'find' | 'explain' | 'show' | 'search';
  targets: QueryTarget[];
  filters: QueryFilter[];
  context?: CodeContext;
}
```

### 2. Semantic Understanding (~250 lines)
- Natural language tokenization
- Entity extraction (functions, classes, variables)
- Intent classification
- Context awareness

### 3. Code Search Engine (~350 lines)
- AST traversal for matches
- Semantic similarity scoring
- File and symbol indexing
- Result ranking algorithm

### 4. Query Result Manager (~200 lines)
- Result aggregation
- Snippet extraction
- Navigation helpers
- Voice response generation

### 5. Integration & Testing (~200 lines)
- Connect to voice commands
- Update code analysis service
- Add NLQ commands to registry
- Write query tests

## Outstanding Issues

### From Previous Sessions
1. **Living Documents**
   - Complete evolution tracking
   - Implement preview panel
   - Add session-aware loading

2. **Monitoring Dashboard**
   - Add more metric types
   - Implement alerting
   - Create metric history

3. **Code Analysis**
   - Support more languages
   - Add refactoring suggestions
   - Create fix actions

### Known Bugs
- None critical at this time
- Minor UI glitches in dark theme
- Occasional WebSocket reconnect delay

## Resource Requirements

### Development Time
- Session 2.3.1: ~3-4 hours
- Test coverage: ~2 hours
- Documentation: ~1 hour

### Context Budget
- Estimated: ~2800 tokens
- Output: ~1250 lines
- Buffer: Adequate

### Dependencies
- No new npm packages needed
- Existing infrastructure sufficient
- Web Speech API browser support

## Success Criteria

### For Session 2.3.1 (Completed)
- [x] Basic voice commands working
- [x] Speech recognition integrated
- [x] Commands execute correctly
- [x] Voice feedback operational
- [x] Tests specifications created
- [x] Documentation updated

### For Session 2.3.2
- [ ] NLQ parser operational
- [ ] Code search integrated
- [ ] Semantic understanding working
- [ ] Results properly ranked
- [ ] Voice navigation functional
- [ ] Tests passing

### For Phase 2 Completion
- [ ] All voice features integrated
- [ ] Performance optimized
- [ ] VPS deployment ready
- [ ] Security hardened
- [ ] User guide complete
- [ ] >90% test coverage

## Quick Start Commands

```bash
# Begin Session 2.3.2
cd vscode-extension

# Review voice command implementation
code src/services/voice-command/

# Start development
npm run watch

# Open test instance
F5 in VSCode

# Test NLQ queries
"Find all functions that handle authentication"
"Show me the constructor for MCPClient"
"Where is the memory validation implemented?"
```

## Notes for Next Session

- Leverage existing CommandParser for NLQ foundation
- Consider integrating with code-analysis-service
- Plan query result caching strategy
- Think about search performance optimization
- Design visual feedback for search progress
- Consider voice interruption for long searches