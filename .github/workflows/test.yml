name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"
  POSTGRES_VERSION: "15"
  
jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files
    
    - name: Check import sorting
      run: |
        isort --check-only --diff src/ tests/ cli/ scripts/
    
    - name: Check code formatting
      run: |
        black --check src/ tests/ cli/ scripts/
    
    - name: Run flake8
      run: |
        flake8 src/ tests/ cli/ scripts/
    
    - name: Run mypy type checking
      run: |
        mypy src/ cli/ --ignore-missing-imports

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ -v --cov=src --cov=cli --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  safety-tests:
    name: Safety Validation Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run safety tests
      run: |
        pytest tests/safety/ -v --tb=short
    
    - name: Validate safety compliance
      run: |
        python -c "from src.core.abstraction.concrete_engine import ConcreteAbstractionEngine; engine = ConcreteAbstractionEngine(); print('Safety engine operational')"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, safety-tests]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_cognitive_coding_partner
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test database
      env:
        PGPASSWORD: test_pass
      run: |
        psql -h localhost -U test_user -d test_cognitive_coding_partner -c "CREATE EXTENSION IF NOT EXISTS vector;"
        psql -h localhost -U test_user -d test_cognitive_coding_partner -f migrations/001_initial_schema.sql
    
    - name: Run integration tests
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/test_cognitive_coding_partner
      run: |
        pytest tests/integration/ -v --tb=short -m "not requires_api"
    
    - name: Run API integration tests
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/test_cognitive_coding_partner
      run: |
        # Start API server in background
        python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        
        # Wait for API to be ready
        sleep 10
        
        # Run API tests
        pytest tests/integration/ -v --tb=short -m "requires_api"
        
        # Stop API server
        kill $API_PID

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_cognitive_coding_partner
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      env:
        PGPASSWORD: test_pass
      run: |
        psql -h localhost -U test_user -d test_cognitive_coding_partner -c "CREATE EXTENSION IF NOT EXISTS vector;"
        psql -h localhost -U test_user -d test_cognitive_coding_partner -f migrations/001_initial_schema.sql
    
    - name: Run E2E tests
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/test_cognitive_coding_partner
      run: |
        # Start API server
        python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        
        # Wait for API
        sleep 10
        
        # Run E2E tests
        pytest tests/e2e/ -v --tb=short
        
        # Stop API
        kill $API_PID

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --tb=short -m "performance"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: logs/test_reports/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [unit-tests, safety-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: coachntt:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm coachntt:test python -c "print('Docker image works')"

  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, safety-tests, integration-tests, docker-build]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.lint.result }}" != "success" || \
              "${{ needs.unit-tests.result }}" != "success" || \
              "${{ needs.safety-tests.result }}" != "success" || \
              "${{ needs.integration-tests.result }}" != "success" || \
              "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "One or more tests failed"
          exit 1
        fi
        echo "All tests passed!"