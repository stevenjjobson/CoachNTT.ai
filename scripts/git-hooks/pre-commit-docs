#!/bin/bash
"""
Git pre-commit hook for automated documentation updates.

Automatically updates documentation when code changes are committed,
ensuring docs stay in sync with codebase changes.

This hook:
1. Detects changes to source code files
2. Analyzes changed files for documentation impact
3. Generates updated documentation if needed
4. Validates safety compliance of generated docs
5. Adds updated docs to the commit

Installation:
    cp scripts/git-hooks/pre-commit-docs .git/hooks/pre-commit
    chmod +x .git/hooks/pre-commit
"""

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Project paths
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
DOCS_SCRIPT="$PROJECT_ROOT/scripts/automation/generate-docs.py"
DOCS_DIR="$PROJECT_ROOT/docs"

echo -e "${GREEN}üìö Running documentation pre-commit hook...${NC}"

# Check if documentation script exists
if [ ! -f "$DOCS_SCRIPT" ]; then
    echo -e "${RED}‚ùå Documentation script not found: $DOCS_SCRIPT${NC}"
    exit 0  # Don't fail commit, just skip
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Filter for source code files that might affect documentation
SOURCE_FILES=""
for file in $STAGED_FILES; do
    case "$file" in
        *.py|*.js|*.ts|*.jsx|*.tsx)
            if [ -f "$PROJECT_ROOT/$file" ]; then
                SOURCE_FILES="$SOURCE_FILES $PROJECT_ROOT/$file"
            fi
            ;;
    esac
done

# Check if any documentation-relevant files were changed
if [ -z "$SOURCE_FILES" ]; then
    echo -e "${YELLOW}üìã No source code changes detected, skipping documentation update${NC}"
    exit 0
fi

echo -e "${GREEN}üîç Detected changes in source files:${NC}"
for file in $SOURCE_FILES; do
    echo "  - $(basename "$file")"
done

# Check if we should update documentation
UPDATE_DOCS=false

# Check if this is a significant change (not just formatting/comments)
for file in $SOURCE_FILES; do
    # Check if file has function/class changes (simplified detection)
    if git diff --cached "$file" | grep -E "^[+-].*\b(def |class |function |const |let |var )" > /dev/null; then
        UPDATE_DOCS=true
        break
    fi
done

if [ "$UPDATE_DOCS" = false ]; then
    echo -e "${YELLOW}üìù No significant structural changes detected, skipping documentation update${NC}"
    exit 0
fi

echo -e "${GREEN}üîÑ Updating documentation for changed files...${NC}"

# Create temporary log file
LOG_FILE=$(mktemp)

# Run documentation generation
if python3 "$DOCS_SCRIPT" --type api --validate-safety --output "$DOCS_DIR" > "$LOG_FILE" 2>&1; then
    echo -e "${GREEN}‚úÖ Documentation updated successfully${NC}"
    
    # Check if any documentation files were modified
    if [ -d "$DOCS_DIR" ]; then
        DOC_CHANGES=$(git status --porcelain "$DOCS_DIR" 2>/dev/null || true)
        
        if [ -n "$DOC_CHANGES" ]; then
            echo -e "${GREEN}üìÑ Adding updated documentation files to commit:${NC}"
            
            # Stage documentation changes
            git add "$DOCS_DIR"/*.md 2>/dev/null || true
            git add "$DOCS_DIR"/*.mmd 2>/dev/null || true
            
            # Show what was added
            git diff --cached --name-only "$DOCS_DIR" | while read -r doc_file; do
                echo "  + $doc_file"
            done
            
            echo -e "${GREEN}üìö Documentation has been updated and staged for commit${NC}"
        else
            echo -e "${YELLOW}üìã Documentation is already up to date${NC}"
        fi
    fi
    
else
    echo -e "${RED}‚ùå Documentation generation failed:${NC}"
    cat "$LOG_FILE"
    rm -f "$LOG_FILE"
    
    # Don't fail the commit for documentation issues
    echo -e "${YELLOW}‚ö†Ô∏è  Proceeding with commit despite documentation generation failure${NC}"
    exit 0
fi

# Clean up
rm -f "$LOG_FILE"

# Run safety validation on existing docs
echo -e "${GREEN}üõ°Ô∏è  Validating documentation safety...${NC}"

SAFETY_LOG=$(mktemp)
if python3 "$DOCS_SCRIPT" --safety-check --output "$DOCS_DIR" > "$SAFETY_LOG" 2>&1; then
    # Check for safety violations
    if grep -q "Safety Score: 0\." "$SAFETY_LOG"; then
        SAFETY_SCORE=$(grep "Safety Score:" "$SAFETY_LOG" | awk '{print $3}')
        if [ "$(echo "$SAFETY_SCORE < 0.8" | bc -l 2>/dev/null || echo "0")" = "1" ]; then
            echo -e "${RED}‚ùå Documentation safety validation failed (score: $SAFETY_SCORE)${NC}"
            echo -e "${RED}üö® Documentation contains potential safety violations${NC}"
            cat "$SAFETY_LOG"
            rm -f "$SAFETY_LOG"
            exit 1
        else
            echo -e "${GREEN}‚úÖ Documentation safety validation passed (score: $SAFETY_SCORE)${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ Documentation safety validation completed${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Could not validate documentation safety${NC}"
    cat "$SAFETY_LOG"
fi

rm -f "$SAFETY_LOG"

echo -e "${GREEN}‚ú® Documentation pre-commit hook completed successfully${NC}"
exit 0